openapi: 3.0.0
info:
  title: OpenAPI document for Simple User Registry Microservice.
  description: REST API for managing web users, authorization and authentication using JWT.
  contact:
    name: API Support
    url: https://marcomarco.blog
    email: marcomarco@marcomarco.blog
  version: 0.0.1
servers:
  - url: http://127.0.0.1
    description: The development API server
    variables:
      port:
        enum:
          - '8092'
        default: '8092'
      basePath:
        default: /presentation/v1
paths:
  /api/v1/users:
    post:
      operationId: createUser
      summary: Create a User
      description: Lets create an user post a entry in users registry
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserIn"

      responses:
        '201':
          description: OK user created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserOut"

        '400':
          description: Invalid query Params
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '404':
          description: Service Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '409':
          description: User Already Exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Exception Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  schemas:
    UserIn:
      type: object
      required:
        - email
        - password
        - phones
      properties:
        name:
          type: string
          minLength: 36
          maxLength: 200
        email:
          type: string
          format:
            email
          pattern: '^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$'
        password:
          type: string
          format:
            password

        phones:
          type: array
          items:
            type: object
            properties:
              number:
                type: integer
                minimum: 6
                maximum: 9
              citycode:
                type: integer
                minimum: 1
                maximum: 3
              contrycode:
                type: integer
                minimum: 1
                maximum: 3
    UserOut:
      type: object
      properties:
        id:
          type: string
          minLength: 36
          maxLength: 36
          format:
            uuid
        created:
          type: string
          format:
            date-time
        modified:
          type: string
          format:
            date-time
        last_login:
          type: string
          format:
            date-time
        token:
          type: string
        isactive:
          type: boolean

      allOf:     # Combines the User and the output dto
        - $ref: '#/components/schemas/UserIn'

    Error:
      type: object
      required:
        - message
      properties:
        message:
          type: string

